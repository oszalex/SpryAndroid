FORMAT: 1A
HOST: http://www.google.com

# bro
This API is a *short texts saving* service similar to its physical paper presence on your table.

#### Allowed HTTPs requests:

 * `POST` - To create or update resource
 * `PUT` - To create or update resource
 * `GET` - Get a resource or list of resources
 * `DELETE` - To delete resource

#### Description Of Usual Server Responses
 * `200` OK - the request was successful (some API calls may return 201 instead).
 * `201` Created - the request was successful and a resource was created.
 * `204` No Content - the request was successful but there is no representation to return (i.e. the response is empty).
 * `400` Bad Request - the request could not be understood or was missing required parameters.
 * `401` Unauthorized - authentication failed or user doesn't have permissions for requested operation.
 * `403` Forbidden - access denied.
 * `404` Not Found - resource was not found.
 * `405` Method Not Allowed - requested method is not supported for resource.
 * `429` Too Many Requests - exceeded GoodData API limits. Pause requests, wait up to one minute, and try again.

# Group Authentication



 
#### Return Properties

 * status (string) : Status message

## Login [/login]

#### Login Properties

### Login User [GET]

+ Response 200 (application/json)

    + Header
    
            Set-Cookie: "setcookie"

    + Body
    
            {
                "status" : "successfully logged in"
            }

## Logout [/logout]

### Logout User [GET]
+ Request (application/json)

        {
            "username": "username",
            "password": "hashed_password"
        
        }


+ Response 200 (application/json)

    + Header
    
            Set-Cookie: "setcookie"

    + Body
    
            {
                "status" : "successfully logged out"
            }
            
## Registration [/register]
Operations on current user (extended information and permissions)

### register new user [POST]
+ Request (application/json)
    
    + Body
    
            {
                "name": "Dominik 'ommi' Pichler",
                "email": "ommi@u33.sch",
                "password": "hashed_password"
            }

+ Response 201 (application/json)

        {
            "id": 4,
            "name": "Dominik 'ommi' Pichler",
            "email": "ommi@u33.sch",
            "password": "hashed_password"
        }




# Group Users

#### Userproperties

 * `id` positive nummeric and unique number
 * `name` full name including optional nickname. "surname ['nickname'] lastname"
 * `email` email adress
 * `password` hased password
 * `own_events` created events
 * `invitations` invitations 
 * `androidDeviceIDs` ids of all connected android devices
 * `iOSDeviceIDs` ids of all connected iOS devices
 * `followers` list of all friend ID's
 * `following` list of all friends to follow
 * `private` (boolean) true if user has a private profile
 * `sex` male/female
 * `profile_image` optional http link to an image ressource
 * `last_action` timestamp of last request
 * `whitelisted_actions` ID's of allowed categories (default: [1] (= all))
 * `blacklisted_actions` ID's of disallowed categories (default: [] (= none))
 * `location` "-44.22,-33.55"
 
## Users Collection [/users]
### List all Users [GET]

Paging: This resource optionally allows paging. Use offset and limit parameters on the end of the URI. example: users?offset=1&limit=3

+ Request

    + Header
    
            Authorization: Bearer RsT5OjbzRn430zqMLgV3Ia
    
    + Body

+ Response 200 (application/json)

        {
          "users": [
            {
              "id": 1,
              "password": null,
              "username": "username"
            },
            {
              "id": 6,
              "password": "some fancy hash",
              "username": "username"
            }
          ]
        }


## User [/users/{id}]
A single User object with all its details


### Retrieve a User [GET]

Whitelist and blacklist and location are only part of the response, if the receiver and the given user are friends.

+ Request

    + Header
    
            Authorization: Bearer RsT5OjbzRn430zqMLgV3Ia
    
+ Parameters

    + id (required, number, `1`) ... Numeric `id` of the Note to perform action with. Has example value.

+ Response 200 (application/json)

    + Body

            {
              "user": {
                "id": 2,
                "password": null,
                "username": "username"
              }
            }

+ Response 404 (application/json)

    + Body
            
            {
                "error" : "There is no such a user for you, dear guest."
            }


## Current User [/users/me]
Operations on current user (extended information and permissions)

### Retrieve current User [GET]
+ Request

    + Header
    
            Authorization: Bearer RsT5OjbzRn430zqMLgV3Ia

+ Response 200 (application/json)

    + Body

            {
                "id": 4,
                "name": "Dominik 'ommi' Pichler",
                "profile_image" : "http://upload.wikimedia.org/wikipedia/commons/a/a6/Caparica_December_2011-1a.jpg",
                "email": "ommi@u33.sch",
                "own_events":[0,4,8,9],
                "invitations":[1,3,2,5],
                "androidDeviceIDs":[213123123123],
                "iOsDeviceIds":"TODO",
                "whitelisted_actions":[1],
                "blacklisted_actions":[]
            }

+ Response 401 (application/json)

    + Body
            
            {
                "error" : "You're not logged in, bro!"
            }
            
### Update current User [PATCH]
+ Request

    + Header
    
            Authorization: Bearer RsT5OjbzRn430zqMLgV3Ia

+ Response 200 (application/json)

    + Body

            {
                "id": 4,
                "name": "Dominik 'ommi' Pichler",
                "image": "<BASE64Image>",
                "email": "ommi@u33.sch"
                "password": "mamamia",
                "own_events":[0,4,8,9],
                "invitations":[1,3,2,5],
                "androidDeviceIDs":[213123123123],
                "iOsDeviceIds":"TODO",
                "whitelisted_actions":[1],
                "blacklisted_actions":[],
                "location":"<GeoPoint>"
            }
            



# Group Events
Events related resources of the **BRO API**

#### Event Properties

 * `id` (required, autoincrement, numeric)
 * `name` (unique, required)
 * `datetime` (default:now) ISO 8601, Complete date plus hours, minutes and seconds: YYYY-MM-DDThh:mm:ssTZD (eg 1997-07-16T19:20:30+01:00)
 * `creator_id` (required)
 * `participant_ids` (required) list of participant identifers
 * `venue_id` identifer of place (foresquare venue id)
 * `tags` list of tags

 
## Events Collection [/events?offset=1&limit=3]

Paging: This resource optionally allows paging. Use offset and limit parameters on the end of the URI. example: events?offset=1&limit=3

### List all Notes [GET]
+ Request

    + Header
    
            Authorization: Bearer RsT5OjbzRn430zqMLgV3Ia
    
+ Response 200 (application/json)

        {
          "events": [
            {
              "creator_id": 1, 
              "datetime": "Fri, 28 Mar 2014 18:37:32 -0000", 
              "id": 1, 
              "name": "GreenSheep Energy Drinks Promo", 
              "participant_ids": [], 
              "public": true, 
              "tags": [
                {
                  "fancy"
                }
              ], 
              "venue_id": 12321
            }, 
            {
              "creator_id": 3, 
              "datetime": "Fri, 28 Mar 2014 18:37:32 -0000", 
              "id": 2, 
              "name": "Ommis gebfeier", 
              "participant_ids": [
                3, 
                2
              ], 
              "public": true, 
              "tags": [
                {
                  "test"
                }
              ], 
              "venue_id": 123245
            }
          ]
        }

## Events Collection [/events]

list all *public* events

+ Response 201 (application/json)
    
        {
          "events": [
            {
              "creator_id": 1, 
              "datetime": "Fri, 28 Mar 2014 18:37:32 -0000", 
              "id": 1, 
              "name": "GreenSheep Energy Drinks Promo", 
              "participant_ids": [], 
              "public": true, 
              "tags": [
                {
                  "fancy"
                }
              ], 
              "venue_id": 12321
            }, 
            {
              "creator_id": 3, 
              "datetime": "Fri, 28 Mar 2014 18:37:32 -0000", 
              "id": 2, 
              "name": "Ommis gebfeier", 
              "participant_ids": [
                3, 
                2
              ], 
              "public": true, 
              "tags": [
                {
                  "test"
                }
              ], 
              "venue_id": 123245
            }
          ]
        }


### Create a Event [POST]
+ Request (application/json)

    + Header
    
            Authorization: Bearer RsT5OjbzRn430zqMLgV3Ia
    
    + Body

            {
                "place":"-44.22,-33.55",
                "datetime":'2008-11-22 19:53:42',
                "participants":[1,5,23],
                "tags": ["beer", "party"],
                "creator" : 3
            }

+ Response 201 (application/json)

        { "id": 1, 
          "place":"-44.22,-33.55",
          "datetime":'2008-11-22 19:53:42',
          "participants":[1,5,23],
          "tags": ["beer", "party"],
          "creator" : 3 
        }

## Event [/users/{id}/events]
+ Request

    + Header
    
            Authorization: Bearer RsT5OjbzRn430zqMLgV3Ia
    
    + Body


## Event [/events/{id}]
A single Event object with all its details. 

**ATTENTION: Permission denied, if user is not a paticipant.**

+ Parameters
    + id (required, number, `1`) ... Numeric `id` of the Note to perform action with. Has example value.

### Retrieve a Event [GET]

    
+ Response 200 (application/json)

    + Header

            X-My-Header: The Value

    + Body

            {
              "data": {
                "creator_id": 1, 
                "datetime": "Fri, 28 Mar 2014 18:37:32 -0000", 
                "id": 1, 
                "name": "GreenSheep Energy Drinks Promo", 
                "participant_ids": [], 
                "public": true, 
                "tags": [
                  {
                    "fancy"
                  }
                ], 
                "venue_id": 12321
              }
            }
            
+ Response 403 (application/json)

        {
            "error": "access forbidden"
        }

+ Response 404 (application/json)

        {
            "error": "There is no such an event for you, dear guest."
        }

### Remove a Event [DELETE]

**ATTENTION: Only possible if current user is creator of specific event**

+ Request

    + Header
    
            Authorization:Basic Y2hyaXM6MTIz
            
+ Response 204

+ Response 401

        {
            "error": "unauthorized"
        }

+ Response 403

        {
            "error": "access forbidden"
        }

+ Response 404 (application/json)

        {
            "error": "There is no such an event for you, dear guest."
        }

# Group Tags
Tags related resources of the **BRO API**

#### Tag Properties

 * `id` (required, autoincrement, numeric)
 * `name` (unique, required)

 
## Tags Collection [/tags/{tag_name}]

### List all Events tagged with `tag_name` [GET]
+ Request

    + Header
    
            Authorization:Basic Y2hyaXM6MTIz
    
+ Response 200 (application/json)

        {
          "data": [
            {
              "creator_id": 1, 
              "datetime": "Fri, 28 Mar 2014 18:37:32 -0000", 
              "id": 1, 
              "name": "GreenSheep Energy Drinks Promo", 
              "participant_ids": [], 
              "public": true, 
              "tags": [
                {
                  "tag_name"
                }
              ], 
              "venue_id": 12321
            }, 
            {
              "creator_id": 3, 
              "datetime": "Fri, 28 Mar 2014 18:37:32 -0000", 
              "id": 2, 
              "name": "Ommis gebfeier", 
              "participant_ids": [
                3, 
                2
              ], 
              "public": true, 
              "tags": [
                {
                 "tag_name"
                }
              ], 
              "venue_id": 123245
            }
          ]
        }

